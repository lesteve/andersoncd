
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_cd_sym.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_cd_sym.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_cd_sym.py:


Convergence of CD, pseudo-symmetric CD, and their Anderson versions
==================================================================

On least squares and logistic regression, performance of pseudo-symmetric
coordinate descent.

.. GENERATED FROM PYTHON SOURCE LINES 9-31

.. code-block:: default

    from collections import defaultdict
    import time

    import numpy as np
    import seaborn as sns
    from scipy import sparse
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from scipy.sparse.linalg import cg, svds
    from scipy.optimize import fmin_l_bfgs_b
    from libsvmdata import fetch_libsvm

    from andersoncd.plot_utils import configure_plt, _plot_legend_apart
    from andersoncd.lasso import solver_enet, primal_enet
    from andersoncd.logreg import solver_logreg, primal_logreg


    save_fig = False
    # save_fig = True

    configure_plt()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/circleci/.local/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    usetex mode requires TeX.




.. GENERATED FROM PYTHON SOURCE LINES 32-33

Load the data:

.. GENERATED FROM PYTHON SOURCE LINES 33-41

.. code-block:: default

    dataset = "real-sim"
    n_features = 1000
    X, y = fetch_libsvm(dataset)

    X = X[:, :n_features]
    X.multiply(1 / sparse.linalg.norm(X, axis=0))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Dataset: real-sim

    <72309x1000 sparse matrix of type '<class 'numpy.float64'>'
    	with 1124310 stored elements in COOrdinate format>



.. GENERATED FROM PYTHON SOURCE LINES 42-43

Generate figures for both Least Squares and Logistic regression

.. GENERATED FROM PYTHON SOURCE LINES 43-188

.. code-block:: default

    for pb in ("ols", "logreg"):
        if pb == 'lasso':
            y -= y.mean()
            y /= norm(y)

        f_gap = 10
        tol = 1e-15
        max_iter = 1000

        t_start = time.time()
        t_optimal = []
        # run "best algorithm": conj. grad. for LS, LBFGS for logreg:
        E_optimal = []
        if pb == "logreg":
            rho = svds(X, k=1)[1][0] ** 2 / 100_000  # a bit of enet regularization
            E_optimal.append(np.log(2) * len(y))
            t_optimal.append(0)
            label_opt = "L-BFGS"
            tmax = 20
            t_start = time.time()

            def callback(x):
                pobj = primal_logreg(X @ x, y, x, 0, rho)
                E_optimal.append(pobj)
                t_optimal.append(time.time() - t_start)

            def obj(x):
                return np.log(1 + np.exp(- y * (X @ x))).sum() + rho * x @ x / 2

            def fprime(x):
                return - X.T @ (y / (1 + np.exp(y * (X @ x)))) + rho * x

            fmin_l_bfgs_b(obj, np.zeros(
                X.shape[1]), fprime=fprime, callback=callback, factr=0.01, pgtol=0,
                maxiter=max_iter)
        else:
            alpha = 0
            rho = 0  # no elastic net
            E_optimal.append(norm(y) ** 2 / 2)
            t_optimal.append(0)
            label_opt = "conjugate grad."
            t_start = time.time()
            tmax = 3

            def callback(x):
                pobj = primal_enet(y - X @ x, x, alpha)
                E_optimal.append(pobj)
                t_optimal.append(time.time() - t_start)

            cg(X.T @ X, X.T @ y, callback=callback, maxiter=max_iter, tol=1e-32)
        E_optimal = np.array(E_optimal)

        all_algos = [
            ('cd', False),
            ('cd', True),
            ('cdsym', False),
            ('cdsym', True),
            ('rcd', False),
        ]

        dict_coef = defaultdict(lambda: 1)
        dict_coef['cdsym'] = 2
        algo_names = {}
        algo_names["cd", False] = "CD"
        algo_names["rcd", False] = "RCD"
        algo_names["cdsym", False] = "CD sym"
        algo_names["cd", True] = "CD - Anderson"
        algo_names["cdsym", True] = "CD sym - Anderson"

        dict_Es = {}
        dict_times = {}

        for algo in all_algos:
            print("Running %s" % algo_names[algo])
            if pb == "ols":
                _, E, _, times = solver_enet(
                    X, y, alpha=alpha, f_gap=f_gap,
                    max_iter=int(max_iter/dict_coef[algo[0]]), tol=tol,
                    algo=algo[0], use_acc=algo[1], compute_time=True, tmax=tmax)
            elif pb == "logreg":
                _, E, _, times = solver_logreg(
                    X, y, alpha=alpha, rho=rho, f_gap=f_gap,
                    max_iter=max_iter//dict_coef[algo[0]], tol=tol,
                    algo=algo[0], use_acc=algo[1], compute_time=True, tmax=tmax)
            dict_Es[algo] = E
            dict_times[algo] = times

        current_palette = sns.color_palette("colorblind")
        dict_color = {}
        dict_color["cd"] = current_palette[1]
        dict_color['cdsym'] = current_palette[2]
        dict_color["rcd"] = current_palette[3]

        p_star = E_optimal[-1]
        for E in dict_Es.values():
            p_star = min(p_star, min(E))

        plt.close('all')
        fig, ax = plt.subplots(figsize=(10, 5))
        for algo in all_algos:
            E = dict_Es[algo]
            use_acc = algo[1]
            linestyle = 'dashed' if use_acc else 'solid'
            ax.semilogy(
                dict_times[algo],
                # dict_coef[algo[0]] * f_gap * np.arange(len(E)),
                E - p_star,
                label=algo_names[algo],
                color=dict_color[algo[0]], linestyle=linestyle)

        ax.semilogy(
            t_optimal,
            # np.arange(len(E_optimal)),
            E_optimal - p_star,
            label=label_opt, color='black', linestyle='dashdot')

        dict_dataset = {}
        dict_dataset["rcv1.binary"] = "rcv1"
        dict_dataset["real-sim"] = "real_sim"  # use _ not - for latex
        dict_dataset["leukemia"] = "leukemia"

        str_info = "%s (%i st columns)" % (dataset, n_features)
        title = pb + str_info

        plt.ylabel(r"Suboptimality")
        plt.xlabel(r"Time (s)")
        plt.xlim((0, tmax))
        plt.ylim((1e-10, None))
        plt.tight_layout()

        if save_fig:
            fig_dir = ""
            fig_dir_svg = ""
            fig.savefig(
                "%senergies_cdsym_%s_time.pdf" % (fig_dir, pb),
                bbox_inches="tight")
            fig.savefig(
                "%senergies_cdsym_%s_time.svg" % (fig_dir, pb),
                bbox_inches="tight")
            _plot_legend_apart(
                ax, "%senergies_cdsym_%s_legend.pdf" % (fig_dir, pb), ncol=4)

        plt.legend()
        plt.title(title.replace('_', ' '))
        plt.show(block=False)



.. image:: /auto_examples/images/sphx_glr_plot_cd_sym_001.png
    :alt: logregreal-sim (1000 st columns)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Running CD
    Running CD - Anderson
    Running CD sym
    Running CD sym - Anderson
    Running RCD
    Running CD
    elapsed time: 0.000878 
    elapsed time: 0.665543 
    elapsed time: 0.956564 
    elapsed time: 1.268590 
    elapsed time: 1.588490 
    elapsed time: 1.887247 
    elapsed time: 2.210318 
    elapsed time: 2.543586 
    elapsed time: 2.878848 
    elapsed time: 3.208520 
    elapsed time: 3.522187 
    elapsed time: 3.848826 
    elapsed time: 4.171906 
    elapsed time: 4.523569 
    elapsed time: 4.891145 
    elapsed time: 5.212044 
    elapsed time: 5.542200 
    elapsed time: 5.852956 
    elapsed time: 6.188961 
    elapsed time: 6.512550 
    elapsed time: 6.837966 
    elapsed time: 7.158562 
    elapsed time: 7.499988 
    elapsed time: 7.809803 
    elapsed time: 8.204910 
    elapsed time: 8.526149 
    elapsed time: 8.835173 
    elapsed time: 9.161018 
    elapsed time: 9.482659 
    elapsed time: 9.826933 
    elapsed time: 10.141741 
    elapsed time: 10.450007 
    elapsed time: 10.790650 
    elapsed time: 11.129463 
    elapsed time: 11.445719 
    elapsed time: 11.753478 
    elapsed time: 12.078438 
    elapsed time: 12.392659 
    elapsed time: 12.717151 
    elapsed time: 13.016689 
    elapsed time: 13.326585 
    elapsed time: 13.664943 
    elapsed time: 13.956212 
    elapsed time: 14.291089 
    elapsed time: 14.586551 
    elapsed time: 14.908367 
    elapsed time: 15.241149 
    elapsed time: 15.546500 
    elapsed time: 15.870623 
    elapsed time: 16.168447 
    elapsed time: 16.483810 
    elapsed time: 16.791548 
    elapsed time: 17.100898 
    elapsed time: 17.406622 
    elapsed time: 17.715811 
    elapsed time: 18.048428 
    elapsed time: 18.356951 
    elapsed time: 18.687537 
    elapsed time: 19.000041 
    elapsed time: 19.298440 
    elapsed time: 19.626067 
    elapsed time: 19.956880 
    elapsed time: 20.271692 
    Running CD - Anderson
    elapsed time: 0.000940 
    elapsed time: 0.379434 
    elapsed time: 0.743994 
    elapsed time: 1.078921 
    elapsed time: 1.426445 
    elapsed time: 1.782957 
    elapsed time: 2.117562 
    elapsed time: 2.450943 
    elapsed time: 2.796877 
    elapsed time: 3.131484 
    elapsed time: 3.487246 
    elapsed time: 3.805828 
    elapsed time: 4.166300 
    elapsed time: 4.497392 
    elapsed time: 4.828099 
    elapsed time: 5.167815 
    elapsed time: 5.486965 
    elapsed time: 5.821890 
    elapsed time: 6.153709 
    elapsed time: 6.467981 
    elapsed time: 6.780534 
    elapsed time: 7.085909 
    elapsed time: 7.400240 
    elapsed time: 7.737197 
    elapsed time: 8.046704 
    elapsed time: 8.355299 
    elapsed time: 8.673960 
    elapsed time: 9.010706 
    elapsed time: 9.429387 
    elapsed time: 9.855101 
    elapsed time: 10.286607 
    elapsed time: 10.700052 
    elapsed time: 11.115329 
    elapsed time: 11.526064 
    elapsed time: 11.945175 
    elapsed time: 12.366038 
    elapsed time: 12.805453 
    elapsed time: 13.213428 
    elapsed time: 13.630384 
    elapsed time: 14.056694 
    elapsed time: 14.472525 
    elapsed time: 14.887762 
    elapsed time: 15.300935 
    elapsed time: 15.713045 
    elapsed time: 16.124840 
    elapsed time: 16.536018 
    elapsed time: 16.943880 
    elapsed time: 17.362591 
    elapsed time: 17.782393 
    elapsed time: 18.200209 
    elapsed time: 18.613977 
    elapsed time: 19.024679 
    elapsed time: 19.433999 
    elapsed time: 19.862636 
    elapsed time: 20.285186 
    Running CD sym
    elapsed time: 0.001118 
    elapsed time: 0.813570 
    elapsed time: 1.619468 
    elapsed time: 2.456093 
    elapsed time: 3.266751 
    elapsed time: 3.951946 
    elapsed time: 4.554954 
    elapsed time: 5.141495 
    elapsed time: 5.730685 
    elapsed time: 6.362384 
    elapsed time: 6.956777 
    elapsed time: 7.573401 
    elapsed time: 8.203701 
    elapsed time: 8.784025 
    elapsed time: 9.366712 
    elapsed time: 9.950221 
    elapsed time: 10.567394 
    elapsed time: 11.184014 
    elapsed time: 11.822913 
    elapsed time: 12.467631 
    elapsed time: 13.092291 
    elapsed time: 13.786545 
    elapsed time: 14.449998 
    elapsed time: 15.079628 
    elapsed time: 15.709453 
    elapsed time: 16.291168 
    elapsed time: 16.930120 
    elapsed time: 17.569235 
    elapsed time: 18.281081 
    elapsed time: 18.969883 
    elapsed time: 19.650756 
    elapsed time: 20.278436 
    Running CD sym - Anderson
    elapsed time: 0.001030 
    elapsed time: 0.727623 
    elapsed time: 1.440868 
    elapsed time: 2.115129 
    elapsed time: 2.758273 
    elapsed time: 3.417249 
    elapsed time: 4.078102 
    elapsed time: 4.716833 
    elapsed time: 5.345678 
    elapsed time: 5.991092 
    elapsed time: 6.577751 
    elapsed time: 7.182624 
    elapsed time: 7.828427 
    elapsed time: 8.410975 
    elapsed time: 9.035458 
    elapsed time: 9.653660 
    elapsed time: 10.327109 
    elapsed time: 10.936114 
    elapsed time: 11.523207 
    elapsed time: 12.103908 
    elapsed time: 12.678564 
    elapsed time: 13.247966 
    elapsed time: 13.825960 
    elapsed time: 14.426932 
    elapsed time: 15.012827 
    elapsed time: 15.590764 
    elapsed time: 16.157871 
    elapsed time: 16.777325 
    elapsed time: 17.355453 
    elapsed time: 17.930736 
    elapsed time: 18.520878 
    elapsed time: 19.099801 
    elapsed time: 19.680133 
    elapsed time: 20.282474 
    Running RCD
    elapsed time: 0.000703 
    elapsed time: 0.308885 
    elapsed time: 0.608649 
    elapsed time: 0.949815 
    elapsed time: 1.275474 
    elapsed time: 1.613935 
    elapsed time: 1.974974 
    elapsed time: 2.322904 
    elapsed time: 2.634670 
    elapsed time: 2.956164 
    elapsed time: 3.277359 
    elapsed time: 3.585396 
    elapsed time: 3.910160 
    elapsed time: 4.223929 
    elapsed time: 4.557449 
    elapsed time: 4.864698 
    elapsed time: 5.210834 
    elapsed time: 5.515342 
    elapsed time: 5.842868 
    elapsed time: 6.143830 
    elapsed time: 6.446414 
    elapsed time: 6.760405 
    elapsed time: 7.096006 
    elapsed time: 7.432184 
    elapsed time: 7.718647 
    elapsed time: 8.026371 
    elapsed time: 8.332251 
    elapsed time: 8.629635 
    elapsed time: 8.922803 
    elapsed time: 9.240408 
    elapsed time: 9.536082 
    elapsed time: 9.820167 
    elapsed time: 10.191725 
    elapsed time: 10.507003 
    elapsed time: 10.849232 
    elapsed time: 11.188338 
    elapsed time: 11.477211 
    elapsed time: 11.766843 
    elapsed time: 12.073224 
    elapsed time: 12.417041 
    elapsed time: 12.767648 
    elapsed time: 13.184308 
    elapsed time: 13.587944 
    elapsed time: 13.990328 
    elapsed time: 14.393658 
    elapsed time: 14.790359 
    elapsed time: 15.195145 
    elapsed time: 15.598173 
    elapsed time: 15.994527 
    elapsed time: 16.398860 
    elapsed time: 16.803080 
    elapsed time: 17.205414 
    elapsed time: 17.600649 
    elapsed time: 18.010873 
    elapsed time: 18.415035 
    elapsed time: 18.818587 
    elapsed time: 19.233504 
    elapsed time: 19.641671 
    elapsed time: 20.041257 





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  12.703 seconds)


.. _sphx_glr_download_auto_examples_plot_cd_sym.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_cd_sym.py <plot_cd_sym.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_cd_sym.ipynb <plot_cd_sym.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
